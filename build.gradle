import org.gradle.internal.os.OperatingSystem

plugins {
	id "fabric-loom" version "1.4-SNAPSHOT"
	id "legacy-looming" version "1.4-SNAPSHOT" // Version must be the same as fabric-loom's
	id "maven-publish"
}

base.archivesName = project.archives_base_name
version = project.mod_version
group = project.maven_group

var lwjglNatives = "";

switch (OperatingSystem.current()) {
	case OperatingSystem.LINUX:
		def osArch = System.getProperty("os.arch")
		lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
				? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
				: "natives-linux"
		break
	case OperatingSystem.MAC_OS:
		lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
		break
	case OperatingSystem.WINDOWS:
		def osArch = System.getProperty("os.arch")
		lwjglNatives = osArch.contains("64")
				? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
				: "natives-windows-x86"
		break
}


repositories {
	maven { url = 'https://jitpack.io' }
	mavenCentral()
}


loom {
	// Only needed for versions not available from vanilla launcher by default.
	// customMinecraftManifest.set("https://meta.legacyfabric.net/v2/manifest/${minecraft_version}")

	// Required by 1.7.x
	// runs {
	// 	client {
	// 		programArgs "--userProperties", "{}"
	// 	}
	// }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings(legacy.yarn(project.minecraft_version, project.yarn_build))
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API provides hooks for events, item registration, and more. As most mods will need this, it's included by default.
	// If you know for a fact you don't, it's not required and can be safely removed.
	modImplementation "net.legacyfabric.legacy-fabric-api:legacy-fabric-api:${project.fabric_version}"

	// You can retrieve a specific api module using this notation.
	// modImplementation(legacy.apiModule("legacy-fabric-item-groups-v1", project.fabric_version))

	/*
		Client Dependencies
	 */
	implementation platform("org.lwjgl:lwjgl-bom:3.3.2")

	implementation("com.github.Sol-Client:LWJGL-Patched:bf1d105853")

	runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-nanovg::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	it.options.encoding = "UTF-8"

	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${base.archivesName.get()}" }
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// Select the repositories you want to publish to
	repositories {
		// Uncomment to publish to the local maven
		// mavenLocal()
	}
}
